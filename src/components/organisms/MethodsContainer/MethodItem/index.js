import React from "react";
import Img from "gatsby-image";
import { a, useTrail, useSpring } from "react-spring";
import { ImageBackground } from "components/atoms";
import { enterRight } from "utilities/springConfigs";
import styles from "./styles.module.scss";
import { useInView } from "react-intersection-observer";

const MethodItem = ({ index, description, title, image, itemLength, color }) => {
    const { ref, inView } = useInView({
        threshold: 0.4,
        triggerOnce: true,
    });

    const textTrail = useTrail(2, {
        ...enterRight(inView),
        config: { mass: 5, tension: 2000, friction: 200 },
    });

    const imageSpring = useSpring({
        from: {
            transform: "scale(0)",
        },
        to: {
            transform: inView ? "scale(1)" : "scale(0.3)",
        },
    });

    const pathSpring = useSpring({
        from: {
            opacity: 0,
        },
        to: {
            opacity: inView ? 1 : 0,
        },
        config: { mass: 50, tension: 2000, friction: 200 },
    });

    const AnimatedImg = a(Img);
    const AnimatedDashedRight = a(DashedRight);
    const AnimatedDashedLeft = a(DashedLeft);

    return (
        <div className={`${styles.methodItem} row `} ref={ref}>
            <div className={`${styles.container} col-lg-5`}>
                <div className={styles.indexNumber}>{index}</div>
                <a.h3 className={styles.title} style={textTrail[0]}>
                    {title}
                </a.h3>
                <a.p className={styles.description} style={textTrail[1]}>
                    {description}
                </a.p>
            </div>
            <div
                className={`col-lg-5 ${inView && styles.inView} ${styles.imageContainer} ${
                    (index + 1) % 2 === 1 && styles.marginLeft
                }`}
            >
                <ImageBackground color={color}>
                    <AnimatedImg className={`${styles.image}`} fluid={image} style={imageSpring} />
                    {itemLength !== index &&
                        ((index + 1) % 2 === 1 ? (
                            <AnimatedDashedRight className={styles.dottedLine} fill={"#2f80ed"} style={pathSpring} />
                        ) : (
                            <AnimatedDashedLeft className={styles.dottedLine} fill={"#2f80ed"} style={pathSpring} />
                        ))}
                </ImageBackground>
            </div>
        </div>
    );
};

export default MethodItem;

const DashedLeft = ({ fill, className, style }) => (
    <svg
        className={className}
        width="125"
        height="94"
        viewBox="0 0 125 94"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        style={style}
    >
        <path
            fill={fill}
            opacity={0.4}
            d="M2.49875 1.45007C2.47118 0.898476 2.00167 0.473673 1.45007 0.501247C0.898476 0.528822 0.473673 0.998332 0.501247 1.54993L2.49875 1.45007ZM1.5 1.5C0.501247 1.54993 0.501258 1.55014 0.501269 1.55037C0.501274 1.55046 0.501286 1.5507 0.501295 1.55088C0.501314 1.55125 0.501335 1.55167 0.501359 1.55213C0.501407 1.55306 0.501466 1.55418 0.501536 1.5555C0.501676 1.55814 0.501862 1.56155 0.502099 1.56573C0.502571 1.57409 0.503246 1.58552 0.504159 1.59997C0.505986 1.62888 0.508771 1.66986 0.512817 1.72246C0.520909 1.82765 0.53405 1.97937 0.554672 2.17396C0.595909 2.5631 0.667096 3.12407 0.787738 3.82773C1.02894 5.23457 1.46835 7.21485 2.26293 9.53435L4.15499 8.8862C3.39991 6.68198 2.98484 4.80713 2.75898 3.48976C2.64608 2.83131 2.58059 2.31291 2.54354 1.9632C2.52501 1.78838 2.5136 1.6558 2.50693 1.56906C2.50359 1.52569 2.50144 1.49379 2.50018 1.47381C2.49954 1.46382 2.49913 1.4568 2.49891 1.45283C2.4988 1.45084 2.49873 1.44961 2.49871 1.44915C2.49869 1.44892 2.49869 1.44888 2.4987 1.44903C2.4987 1.44911 2.49871 1.44924 2.49872 1.44941C2.49872 1.4495 2.49873 1.44966 2.49873 1.4497C2.49874 1.44988 2.49875 1.45007 1.5 1.5ZM3.76579 13.2933C5.64846 17.3944 8.61195 22.0463 13.2685 26.3236L14.6214 24.8507C10.1896 20.7798 7.37284 16.3569 5.58342 12.4589L3.76579 13.2933ZM16.3866 28.926C20.1806 31.8023 24.8665 34.3881 30.6496 36.3682L31.2975 34.476C25.7094 32.5627 21.2137 30.0758 17.5948 27.3322L16.3866 28.926ZM34.5014 37.5494C39.1163 38.808 44.3477 39.7002 50.2777 40.1021L50.413 38.1067C44.6031 37.7129 39.5035 36.8406 35.0276 35.6199L34.5014 37.5494ZM54.264 40.2941C56.8167 40.3685 59.4894 40.3564 62.2879 40.2492L62.2113 38.2507C59.4557 38.3562 56.828 38.368 54.3223 38.2949L54.264 40.2941ZM62.2879 40.2492C64.8161 40.1524 67.2375 40.1647 69.5568 40.2765L69.6531 38.2788C67.274 38.1641 64.7948 38.1517 62.2113 38.2507L62.2879 40.2492ZM73.1398 40.5346C78.3673 41.0399 83.0395 42.0719 87.2163 43.5039L87.865 41.6121C83.5328 40.1267 78.7068 39.0634 73.3322 38.5439L73.1398 40.5346ZM90.5694 44.7813C95.3079 46.7747 99.3521 49.3094 102.806 52.1685L104.081 50.628C100.482 47.6482 96.2701 45.0097 91.3449 42.9378L90.5694 44.7813ZM105.481 54.5566C109.126 58.0596 112.02 61.9267 114.315 65.824L116.039 64.8089C113.664 60.7776 110.662 56.7611 106.867 53.1146L105.481 54.5566ZM116.051 68.9874C118.5 73.7903 120.097 78.4921 121.133 82.453L123.068 81.9466C122.003 77.8778 120.36 73.0357 117.832 68.0787L116.051 68.9874ZM121.96 85.9799C122.408 88.1388 122.669 89.9165 122.818 91.1504C122.892 91.7673 122.938 92.2479 122.966 92.572C122.98 92.734 122.989 92.8568 122.994 92.9379C122.997 92.9785 122.999 93.0086 123 93.028C123.001 93.0377 123.001 93.0447 123.001 93.0489C123.002 93.0511 123.002 93.0525 123.002 93.0533C123.002 93.0537 123.002 93.0539 123.002 93.0539C123.002 93.0539 123.002 93.0539 123.002 93.0538C123.002 93.0538 123.002 93.0537 123.002 93.0537C123.002 93.0536 123.002 93.0535 124 93C124.999 92.9465 124.999 92.9464 124.999 92.9462C124.999 92.9462 124.999 92.946 124.999 92.9459C124.999 92.9457 124.999 92.9454 124.999 92.9451C124.999 92.9444 124.999 92.9436 124.999 92.9426C124.999 92.9406 124.998 92.9379 124.998 92.9345C124.998 92.9277 124.997 92.9182 124.996 92.906C124.995 92.8816 124.993 92.8464 124.99 92.8006C124.983 92.7091 124.973 92.5756 124.959 92.4026C124.929 92.0566 124.881 91.5526 124.803 90.9112C124.649 89.6285 124.379 87.7946 123.919 85.5738L121.96 85.9799Z"
        />
    </svg>
);

const DashedRight = ({ fill, className, style }) => (
    <svg
        className={className}
        width="125"
        height="94"
        viewBox="0 0 125 94"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        style={style}
    >
        <path
            fill={fill}
            opacity={0.4}
            d="M123.002 1.45007C123.029 0.898476 123.499 0.473673 124.05 0.501247C124.602 0.528822 125.027 0.998332 124.999 1.54993L123.002 1.45007ZM124 1.5C124.999 1.54993 124.999 1.55014 124.999 1.55037C124.999 1.55046 124.999 1.5507 124.999 1.55088C124.999 1.55125 124.999 1.55167 124.999 1.55213C124.999 1.55306 124.999 1.55418 124.999 1.5555C124.999 1.55814 124.999 1.56155 124.998 1.56573C124.998 1.57409 124.997 1.58552 124.996 1.59997C124.995 1.62888 124.992 1.66986 124.988 1.72246C124.98 1.82765 124.966 1.97937 124.946 2.17396C124.905 2.5631 124.833 3.12407 124.713 3.82773C124.472 5.23457 124.032 7.21485 123.238 9.53435L121.345 8.8862C122.101 6.68198 122.516 4.80713 122.742 3.48976C122.854 2.83131 122.92 2.31291 122.957 1.9632C122.975 1.78838 122.987 1.6558 122.994 1.56906C122.997 1.52569 122.999 1.49379 123 1.47381C123.001 1.46382 123.001 1.4568 123.002 1.45283C123.002 1.45084 123.002 1.44961 123.002 1.44915C123.002 1.44892 123.002 1.44888 123.002 1.44903C123.002 1.44911 123.002 1.44924 123.002 1.44941C123.002 1.4495 123.002 1.44966 123.002 1.4497C123.002 1.44988 123.002 1.45007 124 1.5ZM121.735 13.2933C119.852 17.3944 116.889 22.0463 112.232 26.3236L110.879 24.8507C115.311 20.7798 118.128 16.3569 119.917 12.4589L121.735 13.2933ZM109.114 28.926C105.32 31.8023 100.634 34.3881 94.8509 36.3682L94.203 34.476C99.7911 32.5627 104.287 30.0758 107.906 27.3322L109.114 28.926ZM90.9991 37.5494C86.3842 38.808 81.1528 39.7002 75.2228 40.1021L75.0875 38.1067C80.8974 37.7129 85.997 36.8406 90.4729 35.6199L90.9991 37.5494ZM71.2365 40.2941C68.6838 40.3685 66.0111 40.3564 63.2126 40.2492L63.2892 38.2507C66.0448 38.3562 68.6725 38.368 71.1782 38.2949L71.2365 40.2941ZM63.2126 40.2492C60.6844 40.1524 58.2629 40.1647 55.9437 40.2765L55.8474 38.2788C58.2265 38.1641 60.7057 38.1517 63.2892 38.2507L63.2126 40.2492ZM52.3607 40.5346C47.1332 41.0399 42.4609 42.0719 38.2842 43.5039L37.6355 41.6121C41.9677 40.1267 46.7937 39.0634 52.1683 38.5439L52.3607 40.5346ZM34.9311 44.7813C30.1926 46.7747 26.1483 49.3094 22.695 52.1685L21.4195 50.628C25.0186 47.6482 29.2304 45.0097 34.1555 42.9378L34.9311 44.7813ZM20.0191 54.5566C16.3741 58.0596 13.4808 61.9267 11.1852 65.824L9.46191 64.8089C11.8366 60.7776 14.839 56.7611 18.6333 53.1146L20.0191 54.5566ZM9.44995 68.9874C7.00041 73.7903 5.40363 78.4921 4.36704 82.453L2.4322 81.9466C3.49703 77.8778 5.14013 73.0357 7.6683 68.0787L9.44995 68.9874ZM3.53999 85.9799C3.09229 88.1388 2.83143 89.9165 2.68274 91.1504C2.60842 91.7673 2.56216 92.2479 2.53462 92.572C2.52085 92.734 2.51176 92.8568 2.50617 92.9379C2.50338 92.9785 2.50147 93.0086 2.50029 93.028C2.49969 93.0377 2.49928 93.0447 2.49904 93.0489C2.49892 93.0511 2.49884 93.0525 2.49879 93.0533C2.49877 93.0537 2.49876 93.0539 2.49876 93.0539C2.49876 93.0539 2.49876 93.0539 2.49876 93.0538C2.49877 93.0538 2.49877 93.0537 2.49877 93.0537C2.49878 93.0536 2.49878 93.0535 1.50021 93C0.501646 92.9465 0.501653 92.9464 0.50166 92.9462C0.501663 92.9462 0.501671 92.946 0.501678 92.9459C0.501691 92.9457 0.501706 92.9454 0.501724 92.9451C0.50176 92.9444 0.501805 92.9436 0.501861 92.9426C0.501972 92.9406 0.502123 92.9379 0.502317 92.9345C0.502704 92.9277 0.503261 92.9182 0.504007 92.906C0.505499 92.8816 0.507746 92.8464 0.510895 92.8006C0.517192 92.7091 0.5271 92.5756 0.541805 92.4026C0.571212 92.0566 0.619814 91.5526 0.697107 90.9112C0.851666 89.6285 1.12112 87.7946 1.58166 85.5738L3.53999 85.9799Z"
        />
    </svg>
);
